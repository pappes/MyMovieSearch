import 'dart:async';
import 'dart:convert';

import 'package:meilisearch/meilisearch.dart';
import 'package:my_movie_search/movies/models/metadata_dto.dart';
import 'package:my_movie_search/movies/models/movie_result_dto.dart';
import 'package:my_movie_search/movies/models/search_criteria_dto.dart';
import 'package:my_movie_search/movies/web_data_providers/search/converters/ms_search.dart';
import 'package:my_movie_search/movies/web_data_providers/search/offline/ms_search.dart';
import 'package:my_movie_search/persistence/meilisearch.dart';
import 'package:my_movie_search/utilities/settings.dart';
import 'package:my_movie_search/utilities/web_data/online_offline_search.dart';
import 'package:my_movie_search/utilities/web_data/web_fetch.dart';
import 'package:universal_io/io.dart';

// exceptions generated by meilisearch
const msErrorCloudRefused =
    'This exception was thrown because the response has a status code of 405';
const msErrorBadApiKey = 'The provided API key is invalid';
const msErrorServerDown = 'The request connection took longer than';
// exceptions generated by QueryMsSearchMovies
const errBadApiKey = 'The provided API key is invalid';
const errCloudRefused =
    'Meilisearch cloud does not want to process this request';
const errServerDown = 'The request connection timed out, server may be down.';

/// Implements [WebFetchBase] for searching using MeiliSearch.
///
///
/// ```dart
/// QueryMsSearchMovies().readList(criteria, limit: 10)
/// ```
class QueryMsSearchMovies
    extends WebFetchBase<MovieResultDTO, SearchCriteriaDTO> {
  QueryMsSearchMovies(super.criteria);

  String indexName = 'dvds';

  /// Describe where the data is coming from.
  @override
  String myDataSourceName() => DataSourceType.mssearch.name;

  /// Static snapshot of data for offline operation.
  /// Does not filter data based on criteria.
  @override
  DataSourceFn myOfflineData() => streamJsonOfflineData;

  /// Call Meiliseach API to fetch search results for [criteria].
  @override
  Future<Stream<String>> myFetchWebText(SearchCriteriaDTO criteria) async {
    Settings().init();
    await Settings().cloudSettingsInitialised;
    // 'https://cloud.meilisearch.com/',
    final url = Settings().meiliurl;
    final key = Settings().meilisearchkey;

    final client = initialiseApi(url, key);

    final list = await fetchFromApi(client);

    return Stream.value(jsonEncode(list));
  }

  Future<List<dynamic>> fetchFromApi(MeiliSearchClient client) async {
    final index = client.index(indexName);
    //return index;

    Searcheable<Map<String, dynamic>> resultmap;
    try {
      resultmap = await index.search(criteria.criteriaTitle);
    } on MeiliSearchApiException catch (e) {
      if (e.message.startsWith(msErrorBadApiKey)) {
        throw const SocketException(errBadApiKey);
      }
      if (e.message.startsWith(msErrorCloudRefused)) {
        throw const SocketException(
          errCloudRefused,
        );
      }
      rethrow;
    } on CommunicationException catch (e) {
      if (e.message.startsWith(msErrorServerDown)) {
        try {
          final gcp = GCP();
          await gcp.init();

          // Call the method
          await gcp.startSearchEngine();
        } catch (e) {
          logger.e(e);
        }
        throw const SocketException(
          errServerDown,
        );
      }
      rethrow;
    } catch (e) {
      rethrow;
    }

    return resultmap.hits;
  }

  MeiliSearchClient initialiseApi(String url, String? key) =>
      MeiliSearchClient(url, key);

  /// Convert MsSearch map to MovieResultDTO records.
  @override
  Future<List<MovieResultDTO>> myConvertTreeToOutputType(dynamic tree) async {
    if (tree is List<dynamic>) {
      return MsSearchMovieSearchConverter.dtoFromCompleteJsonMap(tree).toList();
    }
    throw TreeConvertException(
      'expected List got ${tree.runtimeType} unable to interpret data $tree',
    );
  }

  /// converts <INPUT_TYPE> to a string representation.
  @override
  String myFormatInputAsText() => criteria.toPrintableString();

  /// Include entire map in the movie title when an error occurs.
  @override
  MovieResultDTO myYieldError(String errBadApiKey) => MovieResultDTO().error(
        '[QueryMsSearchMovies] $errBadApiKey',
        DataSourceType.mssearch,
      );

  /// API call to MsSearch returning the top 10 matching results
  /// for [searchCriteria].
  @override
  Uri myConstructURI(String searchCriteria, {int pageNumber = 1}) => Uri();
}
