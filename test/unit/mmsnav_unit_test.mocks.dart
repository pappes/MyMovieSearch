// Mocks generated by Mockito 5.4.6 from annotations
// in my_movie_search/test/unit/mmsnav_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i6;

import 'package:flutter_custom_tabs/flutter_custom_tabs.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:my_movie_search/persistence/firebase/firebase_common.dart'
    as _i4;
import 'package:my_movie_search/persistence/nav_log.dart' as _i7;
import 'package:my_movie_search/utilities/navigation/app_context.dart' as _i8;
import 'package:my_movie_search/utilities/navigation/web_nav.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [MMSFlutterCanvas].
///
/// See the documentation for Mockito's code generation for more information.
class MockMMSFlutterCanvas extends _i1.Mock implements _i2.MMSFlutterCanvas {
  @override
  _i3.Future<Object?> viewWebPage(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#viewWebPage, [url]),
            returnValue: _i3.Future<Object?>.value(),
            returnValueForMissingStub: _i3.Future<Object?>.value(),
          )
          as _i3.Future<Object?>);

  @override
  _i3.Future<Object?> viewFlutterPage(_i2.RouteInfo? page) =>
      (super.noSuchMethod(
            Invocation.method(#viewFlutterPage, [page]),
            returnValue: _i3.Future<Object?>.value(),
            returnValueForMissingStub: _i3.Future<Object?>.value(),
          )
          as _i3.Future<Object?>);

  @override
  _i3.Future<Object?> viewFlutterRootPage(_i2.RouteInfo? page) =>
      (super.noSuchMethod(
            Invocation.method(#viewFlutterRootPage, [page]),
            returnValue: _i3.Future<Object?>.value(),
            returnValueForMissingStub: _i3.Future<Object?>.value(),
          )
          as _i3.Future<Object?>);

  @override
  bool closeCurrentScreen() =>
      (super.noSuchMethod(
            Invocation.method(#closeCurrentScreen, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [FirebaseApplicationState].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseApplicationState extends _i1.Mock
    implements _i4.FirebaseApplicationState {
  @override
  _i3.Future<bool> get loggedIn =>
      (super.noSuchMethod(
            Invocation.getter(#loggedIn),
            returnValue: _i3.Future<bool>.value(false),
            returnValueForMissingStub: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  set loggedIn(_i3.Future<bool>? value) => super.noSuchMethod(
    Invocation.setter(#loggedIn, value),
    returnValueForMissingStub: null,
  );

  @override
  set userDisplayName(String? value) => super.noSuchMethod(
    Invocation.setter(#userDisplayName, value),
    returnValueForMissingStub: null,
  );

  @override
  set userId(String? value) => super.noSuchMethod(
    Invocation.setter(#userId, value),
    returnValueForMissingStub: null,
  );

  @override
  set deviceType(String? value) => super.noSuchMethod(
    Invocation.setter(#deviceType, value),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<bool> login() =>
      (super.noSuchMethod(
            Invocation.method(#login, []),
            returnValue: _i3.Future<bool>.value(false),
            returnValueForMissingStub: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> platformLogin() =>
      (super.noSuchMethod(
            Invocation.method(#platformLogin, []),
            returnValue: _i3.Future<bool>.value(false),
            returnValueForMissingStub: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<dynamic> fetchRecord(
    String? collectionPath, {
    required String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchRecord, [collectionPath], {#id: id}),
            returnValue: _i3.Future<dynamic>.value(),
            returnValueForMissingStub: _i3.Future<dynamic>.value(),
          )
          as _i3.Future<dynamic>);

  @override
  _i3.Stream<dynamic> fetchRecords(
    String? collectionPath, {
    String? filterFieldPath,
    dynamic isEqualTo,
    dynamic isNotEqualTo,
    dynamic isLessThan,
    dynamic isLessThanOrEqualTo,
    dynamic isGreaterThan,
    dynamic isGreaterThanOrEqualTo,
    dynamic arrayContains,
    List<dynamic>? arrayContainsAny,
    List<dynamic>? whereIn,
    List<dynamic>? whereNotIn,
    bool? isNull = false,
    _i3.Completer<bool>? initalDataLoadComplete,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchRecords,
              [collectionPath],
              {
                #filterFieldPath: filterFieldPath,
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull,
                #initalDataLoadComplete: initalDataLoadComplete,
              },
            ),
            returnValue: _i3.Stream<dynamic>.empty(),
            returnValueForMissingStub: _i3.Stream<dynamic>.empty(),
          )
          as _i3.Stream<dynamic>);

  @override
  _i3.Future<dynamic>? addRecord(
    String? collectionPath, {
    String? message,
    String? id,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #addRecord,
              [collectionPath],
              {#message: message, #id: id},
            ),
            returnValueForMissingStub: null,
          )
          as _i3.Future<dynamic>?);

  @override
  Map<String, dynamic> newRecord(String? message) =>
      (super.noSuchMethod(
            Invocation.method(#newRecord, [message]),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  String derivedUser(String? device) =>
      (super.noSuchMethod(
            Invocation.method(#derivedUser, [device]),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.method(#derivedUser, [device]),
            ),
            returnValueForMissingStub: _i5.dummyValue<String>(
              this,
              Invocation.method(#derivedUser, [device]),
            ),
          )
          as String);

  @override
  bool derivedUserMatch(String? device, dynamic devices) =>
      (super.noSuchMethod(
            Invocation.method(#derivedUserMatch, [device, devices]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NavLog].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavLog extends _i1.Mock implements _i7.NavLog {
  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void logPageOpen(String? destination, String? request) => super.noSuchMethod(
    Invocation.method(#logPageOpen, [destination, request]),
    returnValueForMissingStub: null,
  );

  @override
  void logPageClose(String? destination, String? request, Object? params) =>
      super.noSuchMethod(
        Invocation.method(#logPageClose, [destination, request, params]),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i6.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AppNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppNavigator extends _i1.Mock implements _i8.AppNavigator {
  @override
  _i3.Future<T?> pushNamed<T extends Object?>(String? name, {Object? extra}) =>
      (super.noSuchMethod(
            Invocation.method(#pushNamed, [name], {#extra: extra}),
            returnValue: _i3.Future<T?>.value(),
            returnValueForMissingStub: _i3.Future<T?>.value(),
          )
          as _i3.Future<T?>);

  @override
  void pushReplacementNamed<T extends Object?>(String? name, {Object? extra}) =>
      super.noSuchMethod(
        Invocation.method(#pushReplacementNamed, [name], {#extra: extra}),
        returnValueForMissingStub: null,
      );

  @override
  bool pop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
            Invocation.method(#pop, [result]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [AppTheme].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppTheme extends _i1.Mock implements _i8.AppTheme {}

/// A class which mocks [AppDialogs].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDialogs extends _i1.Mock implements _i8.AppDialogs {
  @override
  _i3.Future<Object?> popup(String? dialogText, String? title) =>
      (super.noSuchMethod(
            Invocation.method(#popup, [dialogText, title]),
            returnValue: _i3.Future<Object?>.value(),
            returnValueForMissingStub: _i3.Future<Object?>.value(),
          )
          as _i3.Future<Object?>);
}

/// A class which mocks [AppFocus].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppFocus extends _i1.Mock implements _i8.AppFocus {}

/// A class which mocks [CustomTabsLauncher].
///
/// See the documentation for Mockito's code generation for more information.
class MockCustomTabsLauncher extends _i1.Mock
    implements _i8.CustomTabsLauncher {
  @override
  _i3.Future<void> launch(
    String? url, {
    _i9.CustomTabsOptions? customTabsOptions,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #launch,
              [url],
              {#customTabsOptions: customTabsOptions},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}
