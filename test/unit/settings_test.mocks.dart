// Mocks generated by Mockito 5.4.4 from annotations
// in my_movie_search/test/settings_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:my_movie_search/persistence/firebase/firebase_common.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FirebaseApplicationState].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseApplicationState extends _i1.Mock
    implements _i2.FirebaseApplicationState {
  MockFirebaseApplicationState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> get loggedIn => (super.noSuchMethod(
        Invocation.getter(#loggedIn),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  set loggedIn(_i3.Future<bool>? _loggedIn) => super.noSuchMethod(
        Invocation.setter(
          #loggedIn,
          _loggedIn,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userDisplayName(String? _userDisplayName) => super.noSuchMethod(
        Invocation.setter(
          #userDisplayName,
          _userDisplayName,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userId(String? _userId) => super.noSuchMethod(
        Invocation.setter(
          #userId,
          _userId,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set deviceType(String? _deviceType) => super.noSuchMethod(
        Invocation.setter(
          #deviceType,
          _deviceType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> login() => (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> platformLogin() => (super.noSuchMethod(
        Invocation.method(
          #platformLogin,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<dynamic> fetchRecord(
    String? collectionPath, {
    required String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRecord,
          [collectionPath],
          {#id: id},
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Stream<dynamic> fetchRecords(
    String? collectionPath, {
    String? filterFieldPath,
    dynamic isEqualTo,
    dynamic isNotEqualTo,
    dynamic isLessThan,
    dynamic isLessThanOrEqualTo,
    dynamic isGreaterThan,
    dynamic isGreaterThanOrEqualTo,
    dynamic arrayContains,
    List<dynamic>? arrayContainsAny,
    List<dynamic>? whereIn,
    List<dynamic>? whereNotIn,
    bool? isNull = false,
    _i3.Completer<bool>? initalDataLoadComplete,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchRecords,
          [collectionPath],
          {
            #filterFieldPath: filterFieldPath,
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull,
            #initalDataLoadComplete: initalDataLoadComplete,
          },
        ),
        returnValue: _i3.Stream<dynamic>.empty(),
      ) as _i3.Stream<dynamic>);

  @override
  _i3.Future<dynamic>? addRecord(
    String? collectionPath, {
    String? message,
    String? id,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #addRecord,
        [collectionPath],
        {
          #message: message,
          #id: id,
        },
      )) as _i3.Future<dynamic>?);

  @override
  Map<String, dynamic> newRecord(String? message) => (super.noSuchMethod(
        Invocation.method(
          #newRecord,
          [message],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  String derivedUser(String? device) => (super.noSuchMethod(
        Invocation.method(
          #derivedUser,
          [device],
        ),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.method(
            #derivedUser,
            [device],
          ),
        ),
      ) as String);

  @override
  bool derivedUserMatch(
    String? device,
    dynamic devices,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #derivedUserMatch,
          [
            device,
            devices,
          ],
        ),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
