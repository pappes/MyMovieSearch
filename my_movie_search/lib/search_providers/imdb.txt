
//query string https://sg.media-imdb.com/suggests/w/wonder%20woman.json
//json format
//1 = title/name
//id = unique  key (tt=tile/nm=name/vi=video)
//s = supplimentary info (biography, actors or trailer duration
//y = year
//yr = year range for series
//q = title type
//i = image with dimentions)\

imdb$wonder_woman({"v":1,"q":"wonder_woman","d":[
{"l":"Wonder Woman 1984","id":"tt7126948","s":"Gal Gadot, Chris Pine","y":2020,"q":"feature","vt":35
    ,"i":["https://m.media-amazon.com/images/M/MV5BNWY2NWE0NWEtZGUwMC00NWMwLTkyNzUtNmIxMmIyYzA0MjNiXkEyXkFqcGdeQXVyMTA2OTQ3MTUy._V1_.jpg",2764,4096]
    ,"v":
     [
        {"l":"4K Trailer","id":"vi3944268057","s":"2:31","i":["https://m.media-amazon.com/images/M/MV5BMzVkZTY5YzMtMThkZS00YmI1LWEwMWUtNDhhOGQ3N2MwMmRlXkEyXkFqcGdeQWRvb2xpbmhk._V1_.jpg",1404,790]},
        {"l":"Opening Scene","id":"vi321831193","s":"3:26","i":["https://m.media-amazon.com/images/M/MV5BODNjNmI0N2MtYTlkYi00YzgxLTg4NTAtMTFiNWRkY2U0NjVmXkEyXkFqcGdeQWRvb2xpbmhk._V1_.jpg",1343,756]},
        {"l":"Wonder Woman 1984","id":"vi2517680409","s":"1:32","i":["https://m.media-amazon.com/images/M/MV5BOGE3NTkyNTYtMGI2ZC00MGY2LWExZDAtY2VkZWI2YTBlNzAxXkEyXkFqcGdeQVRoaXJkUGFydHlJbmdlc3Rpb25Xb3JrZmxvdw@@._V1_.jpg",1920,1080]}
    ]},
{"l":"Wonder Woman","id":"tt0451279","s":"Gal Gadot, Chris Pine","y":2017,"q":"feature","vt":23
    ,"i":["https://m.media-amazon.com/images/M/MV5BMTYzODQzYjQtNTczNC00MzZhLTg1ZWYtZDUxYmQ3ZTY4NzA1XkEyXkFqcGdeQXVyODE5NzE3OTE@._V1_.jpg",2025,3000]
    ,"v":
    [
        {"l":"Rise of the Warrior","id":"vi1553381657","s":"2:36"
            ,"i":["https://m.media-amazon.com/images/M/MV5BZWVhYzE0NzgtM2U1Yi00OWM1LWJlZTUtZmNkNWZhM2VkMDczXkEyXkFqcGdeQW1yb3NzZXI@._V1_.jpg",1492,788]},
        {"l":"Meet Maxwell Lord: The 'Wonder Woman 1984' Big Bad","id":"vi237027609","s":"3:57"
            ,"i":["https://m.media-amazon.com/images/M/MV5BYjQ3NGRmZTctYWRiNi00ODgxLTg4OWUtZWViYmZiMDJhODg2XkEyXkFqcGdeQWFsZWxvZw@@._V1_.jpg",1920,1080]},
        {"l":"Official Origin Trailer","id":"vi1901311513","s":"2:30","i":["https://m.media-amazon.com/images/M/MV5BMDdhNDBhYzQtOWI4Yy00MjMyLWE4ZDYtMzU1ODllMTljZTMxXkEyXkFqcGdeQXVyMjM4OTI2MTU@._V1_.jpg",1280,720]}
    ]},
{"l":"Wonder Woman","id":"tt1740828","s":"Pedro Pascal, Adrianne Palicki","y":2011,"q":"TV movie"
    ,"i":["https://m.media-amazon.com/images/M/MV5BMjA0MzYzNzY3OV5BMl5BanBnXkFtZTcwMzM4ODM4NA@@._V1_.jpg",761,1800]},
{"l":"Wonder Woman","id":"tt0074074","s":"Lynda Carter, Lyle Waggoner","y":1975,"yr":"1975-1979","q":"TV series"
    ,"i":["https://m.media-amazon.com/images/M/MV5BZjAxYTcxMDUtZTRmMi00NTk3LThkZTItNGNlZTQ3NWRhMjY5XkEyXkFqcGdeQXVyNjExODE1MDc@._V1_.jpg",702,998]},
{"l":"Wonder Woman: Bloodlines","id":"tt8752498","s":"Rosario Dawson, Jeffrey Donovan","y":2019,"q":"feature"
    ,"i":["https://m.media-amazon.com/images/M/MV5BZTkyNmMzMTEtZTNjMC00NTg4LWJlNTktZDdmNzE1M2YxN2E4XkEyXkFqcGdeQXVyNzU3NjUxMzE@._V1_.jpg",1365,2048]},
{"l":"Wonder Woman","id":"tt0072419","s":"Cathy Lee Crosby, Kaz Garas","y":1974,"q":"TV movie"
    ,"i":["https://m.media-amazon.com/images/M/MV5BMTQ3NDkxNjM0Ml5BMl5BanBnXkFtZTgwNzQxNTkwMDE@._V1_.jpg",353,500]},
{"l":"Wonder Woman","id":"tt1186373","s":"Keri Russell, Nathan Fillion","y":2009,"q":"video"
    ,"i":["https://m.media-amazon.com/images/M/MV5BNzU1NmNmNTgtMTUyYS00ZmRmLTkzOWItOTY2ZWZiYjVkYzkzXkEyXkFqcGdeQXVyNjExODE1MDc@._V1_.jpg",500,741]},
{"l":"Jennifer Wenger","id":"nm2628854","s":"Actress, Jimmy Kimmel Live! (2006-2007)"
    ,"i":["https://m.media-amazon.com/images/M/MV5BMjk0MTRlNmUtNGNmNy00OTA2LTg0MWEtMWE2M2M5YmUyMDJkL2ltYWdlXkEyXkFqcGdeQXVyNjY1ODcxNQ@@._V1_.jpg",640,428]}



]})

/* c# imdb scraper

using System;
using System.Collections.Generic;
using System.Linq;
using System.Collections;
using System.Net;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
 
/*******************************************************************************
 * Free ASP.net IMDb Scraper API for the new IMDb Template.
 * Author: Abhinay Rathore
 * Website: http://www.AbhinayRathore.com
 * Blog: http://web3o.blogspot.com
 * More Info: http://web3o.blogspot.com/2010/11/aspnetc-imdb-scraping-api.html
 * Last Updated: Feb 20, 2013
 *******************************************************************************/
 
 namespace IMDb_Scraper
 {
     public class IMDb
     {
         public bool status { get; set; }
         public string Id { get; set; }
         public string Title { get; set; }
         public string OriginalTitle { get; set; }
         public string Year { get; set; }
         public string Rating { get; set; }
         public ArrayList Genres { get; set; }
         public ArrayList Directors { get; set; }
         public ArrayList Writers { get; set; }
         public ArrayList Cast { get; set; }
         public ArrayList Producers { get; set; }
         public ArrayList Musicians { get; set; }
         public ArrayList Cinematographers { get; set; }
         public ArrayList Editors { get; set; }
         public string MpaaRating { get; set; }
         public string ReleaseDate { get; set; }
         public string Plot { get; set; }
         public ArrayList PlotKeywords { get; set; }
         public string Poster { get; set; }
         public string PosterLarge { get; set; }
         public string PosterFull { get; set; }
         public string Runtime { get; set; }
         public string Top250 { get; set; }
         public string Oscars { get; set; }
         public string Awards { get; set; }
         public string Nominations { get; set; }
         public string Storyline { get; set; }
         public string Tagline { get; set; }
         public string Votes { get; set; }
         public ArrayList Languages { get; set; }
         public ArrayList Countries { get; set; }
         public ArrayList ReleaseDates { get; set; }
         public ArrayList MediaImages { get; set; }
         public ArrayList RecommendedTitles { get; set; }
         public string ImdbURL { get; set; }
  
         //Search Engine URLs
         private string GoogleSearch = "http://www.google.com/search?q=imdb+";
         private string BingSearch = "http://www.bing.com/search?q=imdb+";
         private string AskSearch = "http://www.ask.com/web?q=imdb+";
  
         //Constructor
         public IMDb(string MovieName, bool GetExtraInfo = true)
         {
             string imdbUrl = getIMDbUrl(System.Uri.EscapeUriString(MovieName));
             status = false;
             if (!string.IsNullOrEmpty(imdbUrl))
             {
                 parseIMDbPage(imdbUrl, GetExtraInfo);
             }
         }
  
         //Get IMDb URL from search results
         private string getIMDbUrl(string MovieName, string searchEngine = "google")
         {
             string url = GoogleSearch + MovieName; //default to Google search
             if (searchEngine.ToLower().Equals("bing")) url = BingSearch + MovieName;
             if (searchEngine.ToLower().Equals("ask")) url = AskSearch + MovieName;
             string html = getUrlData(url);
             ArrayList imdbUrls = matchAll(@"<a href=""(http://www.imdb.com/title/tt\d{7}/)"".*?>.*?</a>", html);
             if (imdbUrls.Count > 0)
                 return (string)imdbUrls[0]; //return first IMDb result
             else if (searchEngine.ToLower().Equals("google")) //if Google search fails
                 return getIMDbUrl(MovieName, "bing"); //search using Bing
             else if (searchEngine.ToLower().Equals("bing")) //if Bing search fails
                 return getIMDbUrl(MovieName, "ask"); //search using Ask
             else //search fails
                 return string.Empty;
         }
  
         //Parse IMDb page data
         private void parseIMDbPage(string imdbUrl, bool GetExtraInfo)
         {
             string html = getUrlData(imdbUrl+"combined");
             Id = match(@"<link rel=""canonical"" href=""http://www.imdb.com/title/(tt\d{7})/combined"" />", html);
             if (!string.IsNullOrEmpty(Id))
             {
                 status = true;
                 Title = match(@"<title>(IMDb \- )*(.*?) \(.*?</title>", html, 2);
                 OriginalTitle = match(@"title-extra"">(.*?)<", html);
                 Year = match(@"<title>.*?\(.*?(\d{4}).*?\).*?</title>", html);
                 Rating = match(@"<b>(\d.\d)/10</b>", html);
                 Genres = matchAll(@"<a.*?>(.*?)</a>", match(@"Genre.?:(.*?)(</div>|See more)", html));
                 Directors = matchAll(@"<td valign=""top""><a.*?href=""/name/.*?/"">(.*?)</a>", match(@"Directed by</a></h5>(.*?)</table>", html));
                 Writers = matchAll(@"<td valign=""top""><a.*?href=""/name/.*?/"">(.*?)</a>", match(@"Writing credits</a></h5>(.*?)</table>", html));
                 Producers = matchAll(@"<td valign=""top""><a.*?href=""/name/.*?/"">(.*?)</a>", match(@"Produced by</a></h5>(.*?)</table>", html));
                 Musicians = matchAll(@"<td valign=""top""><a.*?href=""/name/.*?/"">(.*?)</a>", match(@"Original Music by</a></h5>(.*?)</table>", html));
                 Cinematographers = matchAll(@"<td valign=""top""><a.*?href=""/name/.*?/"">(.*?)</a>", match(@"Cinematography by</a></h5>(.*?)</table>", html));
                 Editors = matchAll(@"<td valign=""top""><a.*?href=""/name/.*?/"">(.*?)</a>", match(@"Film Editing by</a></h5>(.*?)</table>", html));
                 Cast = matchAll(@"<td class=""nm""><a.*?href=""/name/.*?/"".*?>(.*?)</a>", match(@"<h3>Cast</h3>(.*?)</table>", html));
                 Plot = match(@"Plot:</h5>.*?<div class=""info-content"">(.*?)(<a|</div)", html);
                 PlotKeywords = matchAll(@"<a.*?>(.*?)</a>", match(@"Plot Keywords:</h5>.*?<div class=""info-content"">(.*?)</div", html));
                 ReleaseDate = match(@"Release Date:</h5>.*?<div class=""info-content"">.*?(\d{1,2} (January|February|March|April|May|June|July|August|September|October|November|December) (19|20)\d{2})", html);
                 Runtime = match(@"Runtime:</h5><div class=""info-content"">(\d{1,4}) min[\s]*.*?</div>", html);
                 Top250 = match(@"Top 250: #(\d{1,3})<", html);
                 Oscars = match(@"Won (\d+) Oscars?\.", html);
                 if (string.IsNullOrEmpty(Oscars) && "Won Oscar.".Equals(match(@"(Won Oscar\.)", html))) Oscars = "1";
                 Awards = match(@"(\d{1,4}) wins", html);
                 Nominations = match(@"(\d{1,4}) nominations", html);
                 Tagline = match(@"Tagline:</h5>.*?<div class=""info-content"">(.*?)(<a|</div)", html);
                 MpaaRating = match(@"MPAA</a>:</h5><div class=""info-content"">Rated (G|PG|PG-13|PG-14|R|NC-17|X) ", html);
                 Votes = match(@">(\d+,?\d*) votes<", html);
                 Languages = matchAll(@"<a.*?>(.*?)</a>", match(@"Language.?:(.*?)(</div>|>.?and )", html));
                 Countries = matchAll(@"<a.*?>(.*?)</a>", match(@"Country:(.*?)(</div>|>.?and )", html));
                 Poster = match(@"<div class=""photo"">.*?<a name=""poster"".*?><img.*?src=""(.*?)"".*?</div>", html);
                 if (!string.IsNullOrEmpty(Poster) && Poster.IndexOf("media-imdb.com") > 0)
                 {
                     Poster = Regex.Replace(Poster, @"_V1.*?.jpg", "_V1._SY200.jpg");
                     PosterLarge = Regex.Replace(Poster, @"_V1.*?.jpg", "_V1._SY500.jpg");
                     PosterFull = Regex.Replace(Poster, @"_V1.*?.jpg", "_V1._SY0.jpg");
                 }
                 else
                 {
                     Poster = string.Empty;
                     PosterLarge = string.Empty;
                     PosterFull = string.Empty;
                 }
                 ImdbURL = "http://www.imdb.com/title/" + Id + "/";
                 if (GetExtraInfo)
                 {
                     string plotHtml = getUrlData(imdbUrl + "plotsummary");
                     Storyline = match(@"<p class=""plotpar"">(.*?)(<i>|</p>)", plotHtml);
                     ReleaseDates = getReleaseDates();
                     MediaImages = getMediaImages();
                     RecommendedTitles = getRecommendedTitles();
                 }
             }
  
         }
  
         //Get all release dates
         private ArrayList getReleaseDates()
         {
             ArrayList list = new ArrayList();
             string releasehtml = getUrlData("http://www.imdb.com/title/" + Id + "/releaseinfo");
             foreach (string r in matchAll(@"<tr>(.*?)</tr>", match(@"Date</th></tr>\n*?(.*?)</table>", releasehtml)))
             {
                 Match rd = new Regex(@"<td>(.*?)</td>\n*?.*?<td align=""right"">(.*?)</td>", RegexOptions.Multiline).Match(r);
                 list.Add(StripHTML(rd.Groups[1].Value.Trim()) + " = " + StripHTML(rd.Groups[2].Value.Trim()));
             }
             return list;
         }
  
         //Get all media images
         private ArrayList getMediaImages()
         {
             ArrayList list = new ArrayList();
             string mediaurl = "http://www.imdb.com/title/" + Id + "/mediaindex";
             string mediahtml = getUrlData(mediaurl);
             int pagecount = matchAll(@"<a href=""\?page=(.*?)"">", match(@"<span style=""padding: 0 1em;"">(.*?)</span>", mediahtml)).Count;
             for (int p = 1; p <= pagecount + 1; p++)
             {
                 mediahtml = getUrlData(mediaurl + "?page=" + p);
                 foreach (Match m in new Regex(@"src=""(.*?)""", RegexOptions.Multiline).Matches(match(@"<div class=""thumb_list"" style=""font-size: 0px;"">(.*?)</div>", mediahtml)))
                 {
                     String image = m.Groups[1].Value;
                     list.Add(Regex.Replace(image, @"_V1\..*?.jpg", "_V1._SY0.jpg"));
                 }
             }
             return list;
         }
  
         //Get Recommended Titles
         private ArrayList getRecommendedTitles()
         {
             ArrayList list = new ArrayList();
             string recUrl = "http://www.imdb.com/widget/recommendations/_ajax/get_more_recs?specs=p13nsims%3A" + Id;
             string json = getUrlData(recUrl);
             list = matchAll(@"title=\\""(.*?)\\""", json);
             HashSet<String> set = new HashSet<string>();
             foreach(String rec in list) set.Add(rec);
             return new ArrayList(set.ToList());
         }
  
         /*******************************[ Helper Methods ]********************************/
  
         //Match single instance
         private string match(string regex, string html, int i = 1)
         {
             return new Regex(regex, RegexOptions.Multiline).Match(html).Groups[i].Value.Trim();
         }
  
         //Match all instances and return as ArrayList
         private ArrayList matchAll(string regex, string html, int i = 1)
         {
             ArrayList list = new ArrayList();
             foreach (Match m in new Regex(regex, RegexOptions.Multiline).Matches(html))
                 list.Add(m.Groups[i].Value.Trim());
             return list;
         }
  
         //Strip HTML Tags
         static string StripHTML(string inputString)
         {
             return Regex.Replace(inputString, @"<.*?>", string.Empty);
         }
  
         //Get URL Data
         private string getUrlData(string url)
         {
             WebClient client = new WebClient();
             Random r = new Random();
             //Random IP Address
             client.Headers["X-Forwarded-For"] = r.Next(0, 255) + "." + r.Next(0, 255) + "." + r.Next(0, 255) + "." + r.Next(0, 255);
             //Random User-Agent
             client.Headers["User-Agent"] = "Mozilla/" + r.Next(3, 5) + ".0 (Windows NT " + r.Next(3, 5) + "." + r.Next(0, 2) + "; rv:2.0.1) Gecko/20100101 Firefox/" + r.Next(3, 5) + "." + r.Next(0, 5) + "." + r.Next(0, 5);
             Stream datastream = client.OpenRead(url);
             StreamReader reader = new StreamReader(datastream);
             StringBuilder sb = new StringBuilder();
             while (!reader.EndOfStream)
                 sb.Append(reader.ReadLine());
             return sb.ToString();
         }
     }
 }
 */